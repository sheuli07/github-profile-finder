{"version":3,"sources":["redux/userSearch/actionType.js","App.js","serviceWorker.js","redux/userSearch/userReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["USER_SEARCH_REQUEST","USER_SEARCH_SUCCESS","USER_SEARCH_FAILED","USER_PROFILE_REQUEST","USER_PROFILE_SUCCESS","USER_PROFILE_FAILED","USER_REPO_SEARCH_REQUEST","USER_REPO_SEARCH_SUCCESS","USER_REPO_SEARCH_FAILED","SEARCH_USER_VALUE_CHANGE","SEARCH_USER_VALUE_CLEAR","Home","lazy","UDetails","App","fallback","exact","path","component","eaxct","Boolean","window","location","hostname","match","initialState","singleUser","userRepoList","searchUserValue","rootReducer","combineReducers","user","state","action","type","payload","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qIAAA,sXAAO,IAAMA,EAAsB,sBACtBC,EAAsB,sBACtBC,EAAqB,qBAErBC,EAAuB,uBACvBC,EAAuB,uBACvBC,EAAsB,sBAEtBC,EAA2B,2BAC3BC,EAA2B,2BAC3BC,EAA0B,0BAE1BC,EAA2B,2BAC3BC,EAA0B,2B,uLCVjCC,EAAOC,gBAAK,kBAAM,8DAClBC,EAAWD,gBAAK,kBAAM,uDAebE,MAbf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,SAAU,+BAChB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAWP,IACrC,kBAAC,IAAD,CAAOQ,OAAK,EAACF,KAAK,WAAWC,UAAWL,QCAxCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gECVAC,EAAe,CACjBC,WAAY,GACZC,aAAc,GACdC,gBAAiB,ICRRC,EAAcC,YAAgB,CACvCC,KDUuB,WAAmC,IAAlCC,EAAiC,uDAAzBP,EAAcQ,EAAW,uCACzD,OAAQA,EAAOC,MACX,KAAKjC,IACD,OAAO,2BACA+B,GACAC,EAAOE,SAElB,KAAK/B,IACD,OAAO,2BACA4B,GADP,IAEIN,WAAW,eAAMO,EAAOE,WAEhC,KAAK5B,IACD,OAAO,2BACAyB,GADP,IAEIL,aAAa,YAAKM,EAAOE,WAEjC,KAAK1B,IACD,OAAO,2BACAuB,GADP,IAEIJ,gBAAiBK,EAAOE,UAEhC,KAAKzB,IACD,OAAO,eACAe,GAEX,QACI,OAAOO,ME9BbI,GAJgB,kBAAXf,QAAuBA,OAAOgB,qCAC/BhB,OAAOgB,qCAAqC,IAC5CC,KAEwBC,YAAgBC,MAUrCC,EAAQC,YAAYb,EAAaO,GCb9CO,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,QAGRK,SAASC,eAAe,SJqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.37ed216f.chunk.js","sourcesContent":["export const USER_SEARCH_REQUEST = \"USER_SEARCH_REQUEST\";\nexport const USER_SEARCH_SUCCESS = \"USER_SEARCH_SUCCESS\";\nexport const USER_SEARCH_FAILED = \"USER_SEARCH_FAILED\";\n\nexport const USER_PROFILE_REQUEST = \"USER_PROFILE_REQUEST\";\nexport const USER_PROFILE_SUCCESS = \"USER_PROFILE_SUCCESS\";\nexport const USER_PROFILE_FAILED = \"USER_PROFILE_FAILED\";\n\nexport const USER_REPO_SEARCH_REQUEST = \"USER_REPO_SEARCH_REQUEST\";\nexport const USER_REPO_SEARCH_SUCCESS = \"USER_REPO_SEARCH_SUCCESS\";\nexport const USER_REPO_SEARCH_FAILED = \"USER_REPO_SEARCH_FAILED\";\n\nexport const SEARCH_USER_VALUE_CHANGE = \"SEARCH_USER_VALUE_CHANGE\";\nexport const SEARCH_USER_VALUE_CLEAR = \"SEARCH_USER_VALUE_CLEAR\";\n","import React, { lazy, Suspense } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nconst Home = lazy(() => import(\"./views/home\"));\nconst UDetails = lazy(() => import(\"./views/userDetails\"));\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <Suspense fallback={<div />}>\n                    <Route exact path=\"/home\" component={Home}></Route>\n                    <Route eaxct path=\"/details\" component={UDetails}></Route>\n                </Suspense>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    USER_SEARCH_SUCCESS,\n    USER_PROFILE_SUCCESS,\n    USER_REPO_SEARCH_SUCCESS,\n    SEARCH_USER_VALUE_CHANGE,\n    SEARCH_USER_VALUE_CLEAR,\n} from \"./actionType\";\n\nconst initialState = {\n    singleUser: {},\n    userRepoList: [],\n    searchUserValue: \"\",\n};\n\nexport const userReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case USER_SEARCH_SUCCESS:\n            return {\n                ...state,\n                ...action.payload,\n            };\n        case USER_PROFILE_SUCCESS:\n            return {\n                ...state,\n                singleUser: { ...action.payload },\n            };\n        case USER_REPO_SEARCH_SUCCESS:\n            return {\n                ...state,\n                userRepoList: [...action.payload],\n            };\n        case SEARCH_USER_VALUE_CHANGE:\n            return {\n                ...state,\n                searchUserValue: action.payload,\n            };\n        case SEARCH_USER_VALUE_CLEAR:\n            return {\n                ...initialState,\n            };\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from \"redux\";\nimport { userReducer } from \"../redux/userSearch/userReducer\";\n\nexport const rootReducer = combineReducers({\n    user: userReducer,\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport storage from \"redux-persist/lib/storage\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { rootReducer } from \"../redux/rootReducer\";\n\nconst composeEnhancers =\n    typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n        : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(thunk));\n\n// const persistConfig = {\n//     key: \"persisted\",\n//     storage,\n//     whitelist: [\"user\"],\n// };\n\n// const persistedReducer = persistedReducer(persistConfig, rootReducer);\n\nexport const store = createStore(rootReducer, enhancer);\n\n// export const persistedStore = persistStore(store);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}